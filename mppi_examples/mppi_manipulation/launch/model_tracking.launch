<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="fixed_base" default="true"/>
    <arg name="object" default="shelf"/>
    <arg name="plot_cost" default="false"/>
    <arg name="plot_input" default="false"/>
    <arg name="enable_obstacle" default="false"/>

    <arg name="experiment" default="false"/>
    <arg name="experiment_id" default="manipulation"/>

    <arg name="object_reference_position" default="1.57" if="$(eval arg('object') == 'door')"/>
    <arg name="object_reference_position" default="1.57" if="$(eval arg('object') == 'microwave')"/>
    <arg name="object_reference_position" default="3.14" if="$(eval arg('object') == 'valve')"/>
    <arg name="object_reference_position" default="0.50" if="$(eval arg('object') == 'drawer')"/>
    <arg name="object_reference_position" default="1.57" if="$(eval arg('object') == 'shelf')"/>

    <include file="$(find mppi_manipulation)/launch/load.launch">
        <arg name="debug" value="false"/>
        <arg name="object" value="$(arg object)"/>
        <arg name="fixed_base" value="$(arg fixed_base)"/>
    </include>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <param name="use_tf_static" value="true"/>
        <param name="tf_prefix" value=""/>
        <remap from="robot_description" to="robot_description"/>
        <remap from="joint_states" to="/joint_states"/>
    </node>

    <node name="object_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <remap from="robot_description" to="object_description"/>
        <remap from="joint_states" to="/object/joint_state"/>
    </node>

    <node name="obstacle_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <remap from="robot_description" to="obstacle_description"/>
        <remap from="joint_states" to="/fake_joint_state"/>
    </node>

    <group if="$(arg fixed_base)">
        <param name="/config_file" value="$(find mppi_manipulation)/params/params.yaml"/>
        <rosparam command="load" file="$(find mppi_manipulation)/params/params.yaml" ns="manipulation_control"/>
    </group>
    <group unless="$(arg fixed_base)">
        <param name="/config_file" value="$(find mppi_manipulation)/params/params_mobile.yaml"/>
        <rosparam command="load" file="$(find mppi_manipulation)/params/params_mobile.yaml" ns="manipulation_control"/>
    </group>

    <node name="manipulation_control" type="model_tracking_node" pkg="mppi_manipulation" output="screen">
        <param name="fixed_base" value="$(arg fixed_base)"/>
        <param name="object_reference_position" value="$(arg object_reference_position)"/>
        <rosparam command="load" file="$(find mppi_manipulation)/params/$(arg object)_cost.yaml"/>
    </node>

    <include file="$(find mppi_manipulation)/launch/common.launch">
        <arg name="plot_cost" value="$(arg plot_cost)"/>
        <arg name="plot_input" value="$(arg plot_input)"/>
        <arg name="enable_obstacle" value="$(arg enable_obstacle)"/>
    </include>

    <group if="$(arg experiment)">
        <node pkg="mppi_ros" type="record_data.py" name="record_data">
            <param name="experiment_id" value="$(arg experiment_id)"/>
        </node>
        <node pkg="mppi_manipulation" type="demo.py" name="demo" output="screen"/>
    </group>
</launch>
