<?xml version="1.0" encoding="UTF-8"?>
<launch>

    <arg name="simulation" default="false"/>
    <arg name="use_base_odometry" default="false"/>
    <arg name="debug" default="false"/>

    <arg name="base_odometry_topic" default="/panda_base/vrpn_client/estimated_odometry" 
        unless="$(arg use_base_odometry)"/>
    <arg name="base_odometry_topic" default="/ridgeback_velocity_controller/odom" 
        if="$(arg use_base_odometry)"/>
    
    <node pkg="mppi_manipulation_royalpanda" type="fake_object_odometry_publisher.py" name="fake_object_odometry_publisher" output="screen" if="$(arg debug)"/>
    
    <!-- joins gripper and arm state -->
    <node name="joint_state_aggregator" type="joint_state_aggregator" pkg="mppi_manipulation_royalpanda" output="screen">
        <param name="arm_state_topic" value="/franka_state_controller/joint_states"/>
        <param name="finger_state_topic" value="/franka_gripper/joint_states"/>
        <param name="output_topic" value="/panda/joint_states"/>
        <param name="exact_sync" value="false"/>
    </node>

    <!--    Join together measurements of the base joint positions (x, y, yaw extracted by observer) and arm state
            (published either from simulation or franka state publisher) -->
    <node name="royalpanda_joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
        <rosparam param="source_list">[/observer/base/joint_state, /panda/joint_states] </rosparam>
        <param name="rate" value="200"/>
        <remap from="robot_description" to="robot_description"/>
        <remap from="joint_states" to="/observer/joint_states"/>
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <param name="use_tf_static" value="true"/>
        <param name="tf_prefix" value=""/>
        <remap from="robot_description" to="robot_description"/>
        <remap from="joint_states" to="/observer/joint_states"/>
    </node>

    <node name="model_object_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <remap from="robot_description" to="object_description_raisim"/>
        <remap from="joint_states" to="/observer/object/joint_state"/>
    </node>

    <node name="simulation_object_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <remap from="robot_description" to="object_description_raisim_simulation"/>
        <remap from="joint_states" to="/observer/object/joint_state"/>
    </node>

    <node name="obstacle_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <remap from="robot_description" to="obstacle_description"/>
        <remap from="joint_states" to="/fake_joint_state"/>
    </node>

    <!--    State observer node-->
    <node pkg="mppi_manipulation_royalpanda" name="state_observer_node" type="state_observer_node" output="screen">
        <param name="simulation" value="$(arg simulation)"/>
        <param name="base_alpha" value="0.7"/>
        <param name="base_pose_topic" value="$(arg base_odometry_topic)"/>
        <param name="base_twist_topic" value="/ridgeback_velocity_controller/odom"/>
        <param name="object_pose_topic" value="/shelf_door/vrpn_client/estimated_odometry"/>
        <param name="arm_state_topic" value="/panda/joint_states"/>
        <param name="object_state_topic" value="/simulation/object_state"/> <!-- only in sim -->
        <param name="wrench_topic" value="/ft_compensated"/>
        <param name="observer_update_frequency" value="200"/>
        <param name="exact_sync" value="false"/>
        <param name="wrench_threshold" value="2.0"/>
        <param name="wrench_contact_threshold" value="1"/>
        <rosparam>
          wrench_median_filter:
            name: wrench_median_filter
            type: MultiChannelMedianFilterDouble
            params: {number_of_observations: 5}
        </rosparam>
    </node>
</launch>

