# Publish all joint states -----------------------------------
joint_state_controller:
  type: "joint_state_controller/JointStateController"
  publish_rate: 50

positions_effort_controller:
  type: effort_controllers/JointGroupPositionController
  joints: ["panda_joint1", "panda_joint2", "panda_joint3", "panda_joint4", "panda_joint5", "panda_joint6", "panda_joint7"]
  panda_joint1:
    pid: { p: 12000, d: 50, i: 0.0, i_clamp: 10000 }
  panda_joint2:
    pid: { p: 30000, d: 100, i: 0.02, i_clamp: 10000 }
  panda_joint3:
    pid: { p: 18000, d: 50, i: 0.01, i_clamp: 1 }
  panda_joint4:
    pid: { p: 18000, d: 70, i: 0.01, i_clamp: 10000 }
  panda_joint5:
    pid: { p: 12000, d: 70, i: 0.01, i_clamp: 1 }
  panda_joint6:
    pid: { p: 7000, d: 50, i: 0.01, i_clamp: 1 }
  panda_joint7:
    pid: { p: 2000, d: 20, i: 0.0, i_clamp: 1 }

mppi_panda:
  type: mppi_panda/PandaControllerRos
  dynamics:
    substeps: 1
    kinematic_simulation: true

  initial_configuration: [0.0, -0.52, 0.0, -1.785, 0.0, 1.10, 0.69]
  linear_weight: 10.0
  angular_weight: 1.0
  obstacle_radius: 0.1

  policy_update_rate: 0.0  # execute as fast as possible
  reference_update_rate: 10.0
  publish_ros: true
  ros_publish_rate: 10.0
  static_optimization: false

  kp: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  kd: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]

mppi_panda_sim:
  type: mppi_panda/PandaControllerRosSim
  dynamics:
    substeps: 1
    kinematic_simulation: true

  linear_weight: 10.0
  angular_weight: 1.0
  obstacle_radius: 0.1

  policy_update_rate: 0.0  # execute as fast as possible
  reference_update_rate: 10.0
  publish_ros: true
  ros_publish_rate: 10.0

  kp: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  kd: [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]



