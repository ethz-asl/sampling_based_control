<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="debug" default="false"/>
    <arg name="kinematic" default="true"/>
    <arg name="plot_cost" default="false"/>
    <arg name="plot_input" default="false"/>
    <arg name="enable_obstacle" default="true"/>
    <arg name="experiment" default="false"/>

    <arg name="description_file" default="$(find mppi_panda)/resources/panda/panda_standalone.urdf.xacro"/>
    <!-- TF prefix -->
    <arg name="tf_prefix" default=""/>
    <!-- Load robot description -->

    <arg name="learner_output_path" default=""/>
    <arg name="torchscript_model_path" default=""/>

    <param name="robot_description" command="$(find xacro)/xacro $(arg description_file) resources_prefix:='file://'"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="publish_frequency" value="100"/>
        <param name="use_tf_static" value="true"/>
        <param name="tf_prefix" value="$(arg tf_prefix)"/>
        <remap from="robot_description" to="robot_description"/>
        <remap from="joint_states" to="/joint_states"/>
    </node>

    <arg name="launch_prefix" default="gdb -ex run --args" if="$(arg debug)"/>
    <arg name="launch_prefix" default="" unless="$(arg debug)"/>

    <node name="panda_control" type="panda_control" pkg="mppi_panda" output="screen"
          launch-prefix="$(arg launch_prefix)">
        <rosparam command="load" file="$(find mppi_panda)/config/params.yaml"/>
        <param name="config_file" value="$(find mppi_panda)/config/params.yaml"/>
        <param name="learned_expert_output_path" value="$(arg learner_output_path)" 
            unless="$(eval arg('learner_output_path') == '')" />
        <param name="torchscript_model_path" value="$(arg torchscript_model_path)" 
            unless="$(eval arg('torchscript_model_path') == '')"/>
    </node>

    <include file="$(find mppi_panda)/launch/common.launch">
        <arg name="plot_cost" value="$(arg plot_cost)"/>
        <arg name="plot_input" value="$(arg plot_input)"/>
        <arg name="enable_obstacle" value="$(arg enable_obstacle)"/>
    </include>

    <node pkg="mppi_ros" type="record_data.py" name="record_data" if="$(arg experiment)">
        <param name="experiment_id" value="mppi_panda"/>
    </node>

    <node pkg="mppi_panda" type="target_generator.py" name="target_generator" if="$(arg experiment)"/>
</launch>

<!--launch-prefix="gdb -ex run - -args" -->
